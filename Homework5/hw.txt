1a.
 
                               50

                         20            60

                   10         40           70

                     15     30	        65     80
					 
			  25    35	     75	   

1b.
pre-order:
50 20 10 15 40 30 25 35 60 70 65 80 75
in-order:
10 15 20 25 30 35 40 50 60 65 70 75 80 
post-order:
15 10 25 35 30 40 20 65 75 80 70 60 50

1c.
On deleting 30:
                               50

                         20            60

                   10         40           70

                     15     35	        65     80
					 
			  25     	     75	  

On deleting 20:
                               50

                         25            60

                   10         40           70

                     15     35	        65     80
					 
			         	     75	  


2a.
struct Node{
	int data;
	Node *left, *right, *parent;
	Node():left(nullptr),right(nullptr),parent(nullptr){}
	Node(int a, Node *par):	data(a),left(nullptr),right(nullptr),parent(par){}
};

2b.
void insert(int x) //x is value to be inserted in BST
create a pointer, ptr
initialize ptr to the root
if ptr is nullptr
	create a new node with data = x and parent= nullptr

while ptr is not nullptr
	if ptr’s value is equal to x
		return
	if v’s less than ptr’s value
		if ptr has a left node
			set ptr to its left child
		else
			set ptr’s left pointer to a new node with data =x and set ptr to be its parent, return

	if v’s greater than x
		if ptr has a right node
			set ptr to its right child
		else
			set ptr’s right pointer to a new node with data = x and set ptr to be its parent, return

	
3a.

			8

		3		6
	
	    0       2	     4	     

3b.

The array would be:
8 3 6 0 2 4
(Note count will be 6)

3c.

			6

		3		4
	
	    0       2	     	     

The array would be:
6 3 4 0 2
(Note count will be 5)

4a.
O(C+S)

4b.
O(logC+S)

4c.
O(logS + logC)

4d.
O(logS)

4e.
O(1)

4f.
O(logC+S)

4g.
O(1+SlogS+S) = O(S+SlogS)

4h.
O(ClogS)